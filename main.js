!function(){var e={588:function(e,t,r){function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}var o=function(e){"use strict";var t,r=Object.prototype,o=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",u=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag";function s(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,r){return e[t]=r}}function l(e,t,r,n){var o=t&&t.prototype instanceof m?t:m,i=Object.create(o.prototype),a=new R(n||[]);return i._invoke=function(e,t,r){var n=f;return function(o,i){if(n===d)throw new Error("Generator is already running");if(n===y){if("throw"===o)throw i;return j()}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var u=L(a,r);if(u){if(u===v)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===f)throw n=y,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=d;var c=p(e,t,r);if("normal"===c.type){if(n=r.done?y:h,c.arg===v)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(n=y,r.method="throw",r.arg=c.arg)}}}(e,r,a),i}function p(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}e.wrap=l;var f="suspendedStart",h="suspendedYield",d="executing",y="completed",v={};function m(){}function _(){}function b(){}var g={};s(g,a,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(P([])));k&&k!==r&&o.call(k,a)&&(g=k);var E=b.prototype=m.prototype=Object.create(g);function S(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function r(i,a,u,c){var s=p(e[i],e,a);if("throw"!==s.type){var l=s.arg,f=l.value;return f&&"object"===n(f)&&o.call(f,"__await")?t.resolve(f.__await).then((function(e){r("next",e,u,c)}),(function(e){r("throw",e,u,c)})):t.resolve(f).then((function(e){l.value=e,u(l)}),(function(e){return r("throw",e,u,c)}))}c(s.arg)}var i;this._invoke=function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return i=i?i.then(o,o):o()}}function L(e,r){var n=e.iterator[r.method];if(n===t){if(r.delegate=null,"throw"===r.method){if(e.iterator.return&&(r.method="return",r.arg=t,L(e,r),"throw"===r.method))return v;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=p(n,e.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,v;var i=o.arg;return i?i.done?(r[e.resultName]=i.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,v):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,v)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function R(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function P(e){if(e){var r=e[a];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1,i=function r(){for(;++n<e.length;)if(o.call(e,n))return r.value=e[n],r.done=!1,r;return r.value=t,r.done=!0,r};return i.next=i}}return{next:j}}function j(){return{value:t,done:!0}}return _.prototype=b,s(E,"constructor",b),s(b,"constructor",_),_.displayName=s(b,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===_||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,c,"GeneratorFunction")),e.prototype=Object.create(E),e},e.awrap=function(e){return{__await:e}},S(x.prototype),s(x.prototype,u,(function(){return this})),e.AsyncIterator=x,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var a=new x(l(t,r,n,o),i);return e.isGeneratorFunction(r)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},S(E),s(E,c,"Generator"),s(E,a,(function(){return this})),s(E,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},e.values=P,R.prototype={constructor:R,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(C),!e)for(var r in this)"t"===r.charAt(0)&&o.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function n(n,o){return u.type="throw",u.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],u=a.completion;if("root"===a.tryLoc)return n("end");if(a.tryLoc<=this.prev){var c=o.call(a,"catchLoc"),s=o.call(a,"finallyLoc");if(c&&s){if(this.prev<a.catchLoc)return n(a.catchLoc,!0);if(this.prev<a.finallyLoc)return n(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return n(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return n(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&o.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var i=n;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),C(r),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;C(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:P(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),v}},e}("object"===n(e=r.nmd(e))?e.exports:{});try{regeneratorRuntime=o}catch(e){"object"===("undefined"==typeof globalThis?"undefined":n(globalThis))?globalThis.regeneratorRuntime=o:Function("r","regeneratorRuntime = r")(o)}}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={id:n,loaded:!1,exports:{}};return e[n](i,i.exports,r),i.loaded=!0,i.exports}r.nmd=function(e){return e.paths=[],e.children||(e.children=[]),e},function(){"use strict";function e(e,t,r,n,o,i,a){try{var u=e[i](a),c=u.value}catch(e){return void r(e)}u.done?t(c):Promise.resolve(c).then(n,o)}function t(t){return function(){var r=this,n=arguments;return new Promise((function(o,i){var a=t.apply(r,n);function u(t){e(a,o,i,u,c,"next",t)}function c(t){e(a,o,i,u,c,"throw",t)}u(void 0)}))}}function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}r(588);var o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._url=t.baseUrl,this._token=t.token}var r,o,i,a,u,c,s,l,p,f;return r=e,o=[{key:"_checkResponse",value:function(e){return e.ok?e.json():Promise.reject("something goes wrong: ".concat(e.status," ").concat(e.statusText))}},{key:"getInitialCards",value:(f=t(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(this._url,"/cards"),{headers:{authorization:this._token}});case 2:return t=e.sent,e.abrupt("return",this._checkResponse(t));case 4:case"end":return e.stop()}}),e,this)}))),function(){return f.apply(this,arguments)})},{key:"getUserData",value:(p=t(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(this._url,"/users/me"),{headers:{authorization:this._token}});case 2:return t=e.sent,e.abrupt("return",this._checkResponse(t));case 4:case"end":return e.stop()}}),e,this)}))),function(){return p.apply(this,arguments)})},{key:"uploadCard",value:(l=t(regeneratorRuntime.mark((function e(t,r){var n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(this._url,"/cards"),{method:"POST",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({name:t,link:r})});case 2:return n=e.sent,e.abrupt("return",this._checkResponse(n));case 4:case"end":return e.stop()}}),e,this)}))),function(e,t){return l.apply(this,arguments)})},{key:"updatingProfileInfo",value:(s=t(regeneratorRuntime.mark((function e(t,r){var n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(this._url,"/users/me"),{method:"PATCH",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({name:t,about:r})});case 2:return n=e.sent,e.abrupt("return",this._checkResponse(n));case 4:case"end":return e.stop()}}),e,this)}))),function(e,t){return s.apply(this,arguments)})},{key:"updatingProfileImg",value:(c=t(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(this._url,"/users/me/avatar"),{method:"PATCH",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({avatar:t})});case 2:return r=e.sent,e.abrupt("return",this._checkResponse(r));case 4:case"end":return e.stop()}}),e,this)}))),function(e){return c.apply(this,arguments)})},{key:"deleteCard",value:(u=t(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(this._url,"/cards/").concat(t),{method:"DELETE",headers:{authorization:this._token}});case 2:return r=e.sent,e.abrupt("return",this._checkResponse(r));case 4:case"end":return e.stop()}}),e,this)}))),function(e){return u.apply(this,arguments)})},{key:"likeCard",value:(a=t(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(this._url,"/cards/likes/").concat(t),{method:"PUT",headers:{authorization:this._token,"Content-Type":"application/json"}});case 2:return r=e.sent,e.abrupt("return",this._checkResponse(r));case 4:case"end":return e.stop()}}),e,this)}))),function(e){return a.apply(this,arguments)})},{key:"removeLikeCard",value:(i=t(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(this._url,"/cards/likes/").concat(t),{method:"DELETE",headers:{authorization:this._token,"Content-Type":"application/json"}});case 2:return r=e.sent,e.abrupt("return",this._checkResponse(r));case 4:case"end":return e.stop()}}),e,this)}))),function(e){return i.apply(this,arguments)})}],o&&n(r.prototype,o),e}();function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var a=function(){function e(t){var r,n,o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),n=function(e){"Escape"===e.key&&o.close()},(r="_handleEscClose")in this?Object.defineProperty(this,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):this[r]=n,this._popup=document.querySelector(t)}var t,r;return t=e,(r=[{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("click",(function(t){(t.target.classList.contains("popup")||t.target.classList.contains("popup__close-button"))&&e.close()}))}},{key:"open",value:function(){this._popup.classList.add("popup_visible"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_visible"),document.removeEventListener("keydown",this._handleEscClose)}}])&&i(t.prototype,r),e}();function u(e){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},u(e)}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(){return s="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,r){var n=l(e,t);if(n){var o=Object.getOwnPropertyDescriptor(n,t);return o.get?o.get.call(arguments.length<3?e:r):o.value}},s.apply(this,arguments)}function l(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=h(e)););return e}function p(e,t){return p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},p(e,t)}function f(e,t){if(t&&("object"===u(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function h(e){return h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},h(e)}var d=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(a,e);var t,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=h(n);if(o){var r=h(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return f(this,e)});function a(e,t){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(r=i.call(this,e))._submitTheForm=t,r}return t=a,(r=[{key:"_getInputValues",value:function(){var e={};return this._popup.querySelectorAll(".popup__input").forEach((function(t){return e[t.name]=t.value})),e}},{key:"setEventListeners",value:function(){s(h(a.prototype),"setEventListeners",this).call(this),this._popup.addEventListener("submit",this._submitTheForm)}},{key:"close",value:function(){s(h(a.prototype),"close",this).call(this),this._popup.querySelector(".popup__form").reset()}}])&&c(t.prototype,r),a}(a);function y(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function v(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var m=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._formElement=r}var t,r;return t=e,(r=[{key:"_showInputError",value:function(e,t){var r=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),r.textContent=t,r.classList.add(this._errorClass)}},{key:"_hideInputError",value:function(e){var t=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}},{key:"_hasInvalidInput",value:function(e){return e.some((function(e){return!e.validity.valid}))}},{key:"_toggleButtonState",value:function(e,t){this._hasInvalidInput(e)?(t.classList.add(this._inactiveButtonClass),t.disabled=!0):(t.classList.remove(this._inactiveButtonClass),t.disabled=!1)}},{key:"_setEventListeners",value:function(){var e=this,t=Array.from(this._formElement.querySelectorAll(this._inputSelector)),r=this._formElement.querySelector(this._submitButtonSelector);this._toggleButtonState(t,r),t.forEach((function(n){n.addEventListener("input",(function(){e._checkInputValidity(n),e._toggleButtonState(t,r)}))}))}},{key:"resetValidation",value:function(){var e,t=this;this._inputList=function(e){if(Array.isArray(e))return y(e)}(e=this._formElement.querySelectorAll(this._inputSelector))||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return y(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?y(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector),this._toggleButtonState(this._inputList,this._buttonElement),this._inputList.forEach((function(e){t._hideInputError(e)}))}},{key:"enableValidation",value:function(){this._formElement.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}}])&&v(t.prototype,r),e}(),_=m;function b(e,t,r,n,o,i,a){try{var u=e[i](a),c=u.value}catch(e){return void r(e)}u.done?t(c):Promise.resolve(c).then(n,o)}function g(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var w=function(){function e(t,r,n,o,i,a,u){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=t.name,this._link=t.link,this._templateElement=r,this._onImageClick=n,this._likes=t.likes,this._ownerId=t.owner._id,this._cardId=t._id,this._addingLikes=o,this._deletingLikes=i,this._openDeleteCardPopup=a,this._myId=u._profileId}var t,r;return t=e,r=[{key:"_checkAmountOfLikes",value:function(e){this._numLikes=e.length}},{key:"_checkingIfUserLikesCard",value:function(){var e=this;this._likes.forEach((function(t){t._id===e._myId&&e._cardElement.querySelector(".card__button").classList.add("card__button_black")}))}},{key:"_handlePreviewImage",value:function(){this._onImageClick({link:this._link,name:this._name})}},{key:"_setEventListeners",value:function(){var e=this,t=this._cardElement.querySelector(".card__button");this._cardElement.querySelector(".card__delete-button").addEventListener("click",(function(t){e._openDeleteCardPopup(e._cardElement,e._cardId)})),t.addEventListener("click",function(){var r,n=(r=regeneratorRuntime.mark((function r(n){var o,i;return regeneratorRuntime.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:if(t.classList.contains("card__button_black")){r.next=14;break}return r.prev=1,r.next=4,e._addingLikes(e._cardId);case 4:(o=r.sent)&&(e._checkAmountOfLikes(o),n.target.classList.add("card__button_black"),e._cardElement.querySelector(".card__num-likes").style.display="block",e._cardElement.querySelector(".card__num-likes").textContent=e._numLikes),r.next=12;break;case 8:r.prev=8,r.t0=r.catch(1),alert("your like didnt work"),console.log("like didnt update",r.t0);case 12:r.next=28;break;case 14:return r.prev=14,r.next=17,e._deletingLikes(e._cardId);case 17:(i=r.sent)&&(n.target.classList.remove("card__button_black"),e._checkAmountOfLikes(i),e._cardElement.querySelector(".card__num-likes").textContent=e._numLikes),r.next=25;break;case 21:r.prev=21,r.t1=r.catch(14),alert("your like didnt work"),console.log("like didnt update",r.t1);case 25:return r.prev=25,0===e._numLikes?e._cardElement.querySelector(".card__num-likes").style.display="none":e._cardElement.querySelector(".card__num-likes").style.display="block",r.finish(25);case 28:case"end":return r.stop()}}),r,null,[[1,8],[14,21,25,28]])})),function(){var e=this,t=arguments;return new Promise((function(n,o){var i=r.apply(e,t);function a(e){b(i,n,o,a,u,"next",e)}function u(e){b(i,n,o,a,u,"throw",e)}a(void 0)}))});return function(e){return n.apply(this,arguments)}}()),this._cardElement.querySelector(".card__image").addEventListener("click",(function(){e._handlePreviewImage()}))}},{key:"createCard",value:function(){return this._cardElement=this._templateElement.querySelector(".card").cloneNode(!0),this._cardElement.querySelector(".card__title").textContent=this._name,this._cardElement.querySelector(".card__image").src=this._link,this._cardElement.querySelector(".card__image").alt=this._name,this._likes.length>0?this._cardElement.querySelector(".card__num-likes").textContent=this._likes.length:this._cardElement.querySelector(".card__num-likes").style.display="none",this._ownerId!==this._myId&&(this._cardElement.querySelector(".card__delete-button").style.display="none"),this._setEventListeners(),this._checkingIfUserLikesCard(),this._cardElement}}],r&&g(t.prototype,r),e}();function k(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var E=function(){function e(t,r){var n=t.render;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._render=n,this._container=document.querySelector(r)}var t,r;return t=e,(r=[{key:"renderItems",value:function(e){var t=this;e.forEach((function(e){t._element=t._render(e)}))}},{key:"addItem",value:function(e){this._container.prepend(e)}}])&&k(t.prototype,r),e}();function S(e){return S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},S(e)}function x(e,t){return x=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},x(e,t)}function L(e,t){if(t&&("object"===S(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return O(e)}function O(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function C(){return C="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,r){var n=R(e,t);if(n){var o=Object.getOwnPropertyDescriptor(n,t);return o.get?o.get.call(arguments.length<3?e:r):o.value}},C.apply(this,arguments)}function R(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=P(e)););return e}function P(e){return P=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},P(e)}var j=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&x(e,t)}(o,e);var t,r,n=(t=o,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=P(t);if(r){var o=P(this).constructor;e=Reflect.construct(n,arguments,o)}else e=n.apply(this,arguments);return L(this,e)});function o(e){var t,r,i,a,u;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),u=function(e){var n=e.link,i=e.name,a=r._popup.querySelector(".popup__figure"),u=r._popup.querySelector(".popup__image");a.textContent=i,u.src=n,u.alt=i,C((t=O(r),P(o.prototype)),"open",t).call(t)},(a="open")in(i=O(r=n.call(this,e)))?Object.defineProperty(i,a,{value:u,enumerable:!0,configurable:!0,writable:!0}):i.open=u,r}return o}(a);function I(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var q=function(){function e(t){var r=t.profileName,n=t.profileDescription,o=t.profilePic;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._profileName=r,this._profileDescription=n,this._profilePic=o}var t,r;return t=e,(r=[{key:"getUserInfo",value:function(){return{name:this._profileName.textContent,description:this._profileDescription.textContent,avatar:this._profilePic,id:this._profileId}}},{key:"setUserInfo",value:function(e){var t=e.name,r=e.description,n=e.avatar,o=e.id;this._profileName.textContent=t,this._profileDescription.textContent=r,this._profilePic.style.backgroundImage="url("+n+")",this._profileId=o}}])&&I(t.prototype,r),e}();function T(e){return T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},T(e)}function A(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function D(){return D="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,r){var n=B(e,t);if(n){var o=Object.getOwnPropertyDescriptor(n,t);return o.get?o.get.call(arguments.length<3?e:r):o.value}},D.apply(this,arguments)}function B(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=V(e)););return e}function N(e,t){return N=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},N(e,t)}function U(e,t){if(t&&("object"===T(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function V(e){return V=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},V(e)}var z=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&N(e,t)}(a,e);var t,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=V(n);if(o){var r=V(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return U(this,e)});function a(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),i.call(this,e)}return t=a,(r=[{key:"provideSubmitHandler",value:function(e){this._handleSubmit=e}},{key:"setEventListeners",value:function(){var e=this;D(V(a.prototype),"setEventListeners",this).call(this),this._popup.addEventListener("submit",(function(t){t.preventDefault(),e._handleSubmit()}))}}])&&A(t.prototype,r),a}(a),F=document.querySelector(".profile__edit-button"),G=document.querySelector(".profile__add-button"),H=document.querySelector(".popup_type_edit-profile"),J=document.querySelector(".popup_type_add-card"),M=document.querySelector(".profile__name"),W=document.querySelector(".profile__description"),Y=document.querySelector(".popup__input_type_name"),$=document.querySelector(".popup__input_type_description"),K=document.querySelector(".popup__input_type_url"),Q=document.querySelector(".popup__input_type_title"),X=document.querySelector("#template").content,Z=H.querySelector(".popup__form"),ee=J.querySelector(".popup__form"),te=document.querySelector(".popup_type_edit-profile-img"),re=document.querySelector(".profile__edit-img-button"),ne=document.querySelector(".profile__photo"),oe=te.querySelector(".popup__input_type_url"),ie=te.querySelector(".popup__form"),ae=te.querySelector(".popup__save-button"),ue=J.querySelector(".popup__save-button"),ce=H.querySelector(".popup__save-button"),se={inputSelector:".popup__input",submitButtonSelector:".popup__save-button",inactiveButtonClass:"popup__save-button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"};function le(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i=[],a=!0,u=!1;try{for(r=r.call(e);!(a=(n=r.next()).done)&&(i.push(n.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(u)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return pe(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?pe(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function pe(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function fe(e,t,r,n,o,i,a){try{var u=e[i](a),c=u.value}catch(e){return void r(e)}u.done?t(c):Promise.resolve(c).then(n,o)}function he(e){return function(){var t=this,r=arguments;return new Promise((function(n,o){var i=e.apply(t,r);function a(e){fe(i,n,o,a,u,"next",e)}function u(e){fe(i,n,o,a,u,"throw",e)}a(void 0)}))}}var de=new o({baseUrl:"https://around.nomoreparties.co/v1/group-12",token:"61a577b5-41b8-4f4a-b2cc-045694a09d23"}),ye=new d(".popup_type_edit-profile",(function(e){return je.apply(this,arguments)})),ve=new d(".popup_type_add-card",(function(e){return Le.apply(this,arguments)})),me=new z(".popup_type_delete-card"),_e=new d(".popup_type_edit-profile-img",(function(e){return we.apply(this,arguments)})),be=new j(".popup_type_zoom-image");function ge(e,t){me.open(),me.provideSubmitHandler(he(regeneratorRuntime.mark((function r(){return regeneratorRuntime.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.prev=0,r.next=3,de.deleteCard(t);case 3:r.sent&&(e.remove(),me.close()),r.next=11;break;case 7:r.prev=7,r.t0=r.catch(0),console.log("backend error ",r.t0),alert("the card wasnt deleted due to error");case 11:case"end":return r.stop()}}),r,null,[[0,7]])}))))}function we(){return(we=he(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),e.prev=1,ae.textContent="Saving...",e.next=5,de.updatingProfileImg(oe.value);case 5:(r=e.sent)&&(Pe.setUserInfo({name:r.name,description:r.about,avatar:r.avatar,id:r._id}),ne.style.backgroundImage="url("+Pe._profilePic.style.backgroundImage+")",_e.close()),e.next=12;break;case 9:e.prev=9,e.t0=e.catch(1),console.log("the photo is not longer updated",e.t0);case 12:return e.prev=12,ae.textContent="Save",console.log("you are on the right way"),e.finish(12);case 16:case"end":return e.stop()}}),e,null,[[1,9,12,16]])})))).apply(this,arguments)}function ke(e){return Ee.apply(this,arguments)}function Ee(){return(Ee=he(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,de.likeCard(t);case 3:if(!(r=e.sent)){e.next=7;break}return console.log("see you like in the console",r.likes),e.abrupt("return",r.likes);case 7:e.next=13;break;case 9:e.prev=9,e.t0=e.catch(0),console.log("something went wrong with your backend",e.t0),alert("something went wrong with your like");case 13:case"end":return e.stop()}}),e,null,[[0,9]])})))).apply(this,arguments)}function Se(e){return xe.apply(this,arguments)}function xe(){return(xe=he(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,de.removeLikeCard(t);case 3:if(!(r=e.sent)){e.next=7;break}return console.log("see you like in the console",r.likes),e.abrupt("return",r.likes);case 7:e.next=12;break;case 9:e.prev=9,e.t0=e.catch(0),console.log("something went wrong",e.t0);case 12:case"end":return e.stop()}}),e,null,[[0,9]])})))).apply(this,arguments)}function Le(){return(Le=he(regeneratorRuntime.mark((function e(t){var r,n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),e.prev=1,ue.textContent="Creation In Progres...",e.next=5,de.uploadCard(Q.value,K.value);case 5:(r=e.sent)&&(n=Ce(r),Re.addItem(n),ve.close()),e.next=12;break;case 9:e.prev=9,e.t0=e.catch(1),console.log("something went wrong with the backend",e.t0);case 12:return e.prev=12,ue.textContent="Save",e.finish(12);case 15:case"end":return e.stop()}}),e,null,[[1,9,12,15]])})))).apply(this,arguments)}function Oe(){return(Oe=he(regeneratorRuntime.mark((function e(){var t,r,n,o;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,Promise.all([de.getInitialCards(),de.getUserData()]);case 3:t=e.sent,r=le(t,2),n=r[0],o=r[1],Pe.setUserInfo({name:o.name,description:o.about,avatar:o.avatar,id:o._id}),Re.renderItems(n),e.next=14;break;case 10:e.prev=10,e.t0=e.catch(0),console.log("something Wrong with upoloading the Card/UserInfo",e.t0),alert("something Wrong with upoloading the Card/UserInfo");case 14:case"end":return e.stop()}}),e,null,[[0,10]])})))).apply(this,arguments)}function Ce(e){return new w(e,X,be.open,ke,Se,ge,Pe).createCard()}be.setEventListeners(),ye.setEventListeners(),ve.setEventListeners(),_e.setEventListeners(),me.setEventListeners(),function(){Oe.apply(this,arguments)}(),re.addEventListener("click",(function(){_e.open(),Te.resetValidation()})),F.addEventListener("click",(function(){var e;ye.open(),e=Pe.getUserInfo(),Y.value=e.name,$.value=e.description,Ie.resetValidation()})),G.addEventListener("click",(function(){ve.open(),qe.resetValidation()}));var Re=new E({render:function(e){var t=Ce(e);Re.addItem(t)}},".cards"),Pe=new q({profileName:M,profileDescription:W,profilePic:ne});function je(){return(je=he(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),e.prev=1,ce.textContent="Saving...",e.next=5,de.updatingProfileInfo(Y.value,$.value);case 5:(r=e.sent)&&(Pe.setUserInfo({name:r.name,description:r.about,avatar:r.avatar}),ye.close()),e.next=13;break;case 9:e.prev=9,e.t0=e.catch(1),console.log("your info wasnt updated due to backend error",e.t0),alert("your info wasnt updated");case 13:return e.prev=13,ce.textContent="Saving",e.finish(13);case 16:case"end":return e.stop()}}),e,null,[[1,9,13,16]])})))).apply(this,arguments)}var Ie=new _(se,Z);Ie.enableValidation();var qe=new _(se,ee);qe.enableValidation();var Te=new _(se,ie);Te.enableValidation()}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,